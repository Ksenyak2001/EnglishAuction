
FUNCTION_BLOCK supposed_price	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	rarity : REAL;
	fame : REAL;
	significance : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	price_d : REAL;
END_VAR

FUZZIFY rarity			
	TERM common := (0,0) (1,1) (3,0) ; 
	TERM scarce := (1,0) (3,1) (5,0);
	TERM rare := (3,0) (5,1) (7,0);
	TERM very_rare := (5,0) (7,1) (9,0);
	TERM extremely_rare := (7,0) (9,1) (10,0);
END_FUZZIFY

FUZZIFY fame			
	TERM looser := (0, 1) (2, 1) (3,0) ;
	TERM ordinary := (2,0) (5,1) (6,1) (9,0);
	TERM superstar := (8, 0) (9, 1) (10,1);
END_FUZZIFY

FUZZIFY significance			
	TERM useless := (0, 1) (2, 1) (4,0) ;
	TERM unobtrusive := (2,0) (5,1) (6,1) (9,0);
	TERM special := (7, 0) (9, 1) (10,1);
END_FUZZIFY

DEFUZZIFY price_d			
	TERM low := (0, 1) (2, 1) (3,1) (4,0) ;
	TERM avg := (3,0) (5,1) (6,1) (8,0);
	TERM high := (7,0) (8,1) (9,1) (10,1);
	METHOD : COG;		
	DEFAULT := -2;		
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF rarity IS common OR fame IS looser OR significance IS useless THEN price_d IS low;
	RULE 2 : IF rarity IS extremely_rare OR fame IS superstar OR significance IS special THEN price_d IS high; 
	RULE 3 : IF rarity IS very_rare AND (significance IS unobtrusive OR significance IS special) THEN price_d IS high;
	RULE 4 : IF (rarity IS scarce OR rarity IS common) AND (fame IS looser OR significance IS useless) THEN price_d IS low; 
	RULE 5 : IF (rarity IS NOT common AND rarity IS NOT extremely_rare)  THEN price_d IS avg; 
	RULE 6 : IF (significance IS unobtrusive AND fame IS ordinary)  THEN price_d IS avg; 
END_RULEBLOCK

END_FUNCTION_BLOCK
